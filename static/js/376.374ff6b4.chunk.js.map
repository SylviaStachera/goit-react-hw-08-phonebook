{"version":3,"file":"static/js/376.374ff6b4.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","redux/contacts/selectors.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactItem/ContactItem.module.css?be2b","components/ContactItem/ContactItem.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","pages/ContactsPage.js"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectLoading = state => state.contacts.loading;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"label\":\"ContactForm_label__-cVXI\",\"input\":\"ContactForm_input__Bl93P\",\"btn-submit\":\"ContactForm_btn-submit__qhOYN\"};","import { nanoid } from 'nanoid';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { fetchContacts, addContact } from 'redux/contacts/operations';\n\nimport css from './ContactForm.module.css';\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    const name = evt.target.elements.name.value;\n    const number = evt.target.elements.number.value;\n\n    const existingContact = contacts.find(contact => contact.name === name);\n    if (existingContact) {\n      alert('Contact with this name already exists!');\n      return evt.target.reset();\n    }\n\n    const newContact = { id: nanoid(), name, number };\n\n    dispatch(addContact(newContact));\n\n    evt.target.reset();\n  };\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <label className={css.label}>\n        Name\n        <input\n          className={css.input}\n          placeholder=\"Enter your name...\"\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Za-яА-Я]+(([' -][a-zA-Za-яА-Я ])?[a-zA-Za-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label className={css.label}>\n        Number\n        <input\n          className={css.input}\n          placeholder=\"Enter your number...\"\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n      <button className={css['btn-submit']} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"btn-delete\":\"ContactItem_btn-delete__5N4yQ\"};","import { deleteContact } from 'redux/contacts/operations';\nimport { useDispatch } from 'react-redux';\n\nimport css from './ContactItem.module.css';\n\nconst ContactItem = ({ contact }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <span>{contact.name}</span>\n      <span>: {contact.number}</span>\n      <button\n        className={css['btn-delete']}\n        onClick={() => dispatch(deleteContact(contact.id))}\n      >\n        Delete\n      </button>\n    </>\n  );\n};\n\nexport default ContactItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"list-item\":\"ContactList_list-item__FFR27\"};","import ContactItem from 'components/ContactItem/ContactItem';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport {\n  selectFilteredContacts,\n  selectError,\n  selectLoading,\n} from 'redux/contacts/selectors';\n\nimport css from './ContactList.module.css';\n\nconst ContactList = () => {\n  const filteredContacts = useSelector(selectFilteredContacts);\n  const loading = useSelector(selectLoading);\n  const error = useSelector(selectError);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      {loading && <p>Loading...</p>}\n\n      {!filteredContacts?.length && !error && !loading && (\n        <p>Sorry! No contacts found.</p>\n      )}\n\n      {error && <p>{error}</p>}\n      <ul>\n        {filteredContacts.map(contact => {\n          return (\n            <li className={css['list-item']} key={contact.id}>\n              <ContactItem contact={contact} />\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"Filter_label__vEd1E\",\"input\":\"Filter_input__N7T3z\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport css from './Filter.module.css';\n\nconst Filter = () => {\n  const filter = useSelector(state => state.filter);\n  const dispatch = useDispatch();\n\n  return (\n    <label className={css.label}>\n      Find contacts by name\n      <input\n        className={css.input}\n        type=\"text\"\n        value={filter}\n        autoComplete=\"off\"\n        placeholder=\"Search name...\"\n        onChange={e => dispatch(setFilter(e.currentTarget.value))}\n      />\n    </label>\n  );\n};\n\nexport default Filter;\n","import ContactForm from '../components/ContactForm/ContactForm';\nimport ContactList from '../components/ContactList/ContactList';\nimport ContactItem from '../components/ContactItem/ContactItem';\nimport Filter from '../components/Filter/Filter';\n\nconst ContactsPage = () => {\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter />\n\n      <ContactList>\n        <ContactItem />\n      </ContactList>\n    </div>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","selectContacts","state","contacts","items","selectError","error","selectLoading","loading","selectFilteredContacts","createSelector","filter","name","toLowerCase","includes","dispatch","useDispatch","useSelector","useEffect","fetchContacts","className","css","onSubmit","evt","preventDefault","target","elements","value","number","find","contact","alert","reset","newContact","addContact","placeholder","type","pattern","title","required","onClick","deleteContact","filteredContacts","length","map","autoComplete","onChange","e","setFilter","currentTarget"],"sourceRoot":""}